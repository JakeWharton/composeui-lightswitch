import static org.jetbrains.kotlin.gradle.plugin.AbstractKotlinPluginKt.NATIVE_COMPILER_PLUGIN_CLASSPATH_CONFIGURATION_NAME

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath libs.kotlin.gradlePlugin
		classpath libs.kotlin.serializationPlugin
		classpath libs.spotless.gradlePlugin
	}
}

apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'org.jetbrains.kotlin.plugin.serialization'

kotlin {
	linuxArm64 {
		binaries.executable {
			entryPoint = 'main'

			// Work around https://youtrack.jetbrains.com/issue/KT-48082.
			linkerOpts(
				"-L${file("usr/lib").absolutePath}",
				"-ldrm",
				"-lmali",
				"-lfontconfig",
				// Do not check for symbols within our shared libraries.
				"--allow-shlib-undefined",
			)
		}
		compilations.main.cinterops {
			create("lightswitch") {
				packageName("lightswitch")
				includeDirs(
					"usr/include",
					"usr/include/libdrm",
				)
				header("usr/include/GLES2/gl2.h")
				header("usr/include/GLES2/gl2ext.h")
				header("usr/include/EGL/egl.h")
				header("usr/include/EGL/eglext.h")
				header("usr/include/gbm.h")
				header("usr/include/input.h")
				header("usr/include/xf86drm.h")
				header("usr/include/xf86drmMode.h")
			}
		}
	}

	sourceSets {
		commonMain {
			dependencies {
				implementation libs.jetbrains.compose.runtime
				implementation 'org.jetbrains.skiko:skiko-linuxarm64:0.0.0-SNAPSHOT'
				implementation 'org.jetbrains.compose.material3:material3:0.0.0-SNAPSHOT'
				implementation libs.ktor.network
				implementation libs.kotlinx.serialization.json
			}
		}
		commonTest {
			dependencies {
				implementation libs.assertk
			}
		}
	}

	sourceSets.configureEach {
		languageSettings.optIn("androidx.compose.runtime.InternalComposeApi")
		languageSettings.optIn("androidx.compose.ui.InternalComposeUiApi")
		languageSettings.optIn("kotlin.ExperimentalStdlibApi")
		languageSettings.optIn("kotlin.contracts.ExperimentalContracts")
		languageSettings.optIn("kotlinx.cinterop.ExperimentalForeignApi")
	}
}

dependencies {
	add(NATIVE_COMPILER_PLUGIN_CLASSPATH_CONFIGURATION_NAME, libs.jetbrains.compose.compiler)
}

apply plugin: 'com.diffplug.spotless'

spotless {
	kotlin {
		target("src/**/*.kt")
		ktlint(libs.ktlint.core.get().version)
			.editorConfigOverride([
				'ktlint_standard_filename': 'disabled',
				'ktlint_function_naming_ignore_when_annotated_with': 'Composable',
			])
			.customRuleSets([
				libs.ktlint.composeRules.get().toString(),
			])
	}
}
